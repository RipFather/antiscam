import json
import telebot
from telebot import types
import os
import logs
import time

from service import initialize_telethon, getids
initialize_telethon()

admins = [773159330, 5464285224, 2078087671]
API_TOKEN = '7892869644:AAFTRPKR8fvYthxbQb4G8jm0xXxhUW2UeZw'
bot = telebot.TeleBot(API_TOKEN)

scam_file = 'scam.json'
good_file = 'good.json'

def load_scam():
    with open(scam_file, 'r') as file:
        return json.load(file)
def load_good():
    with open(good_file, 'r') as file:
        return json.load(file)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∞–º–µ—Ä–æ–≤\n–°–µ–π—á–∞—Å –≤ –±–∞–∑–µ {len(load_scam())} —Å–∫–∞–º–µ—Ä–æ–≤!\n\n‚úç –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å ID/Username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n<blockquote>–í–ª–∞–¥–µ–ª–µ—Ü:\n@RipFather\n–ê–¥–º–∏–Ω:\n@Bomb4296</blockquote>", parse_mode='HTML')
    
@bot.message_handler(commands=['send'])
def handle_send_command(message):
    if message.from_user.id not in admins:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    command_parts = message.text.split(' ', 2)

    if len(command_parts) != 3:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/send <ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <—Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è>`\n"
            "–ü—Ä–∏–º–µ—Ä: `/send 123456789 –∏–¥–∏–æ—Ç`",
            parse_mode="Markdown")
        return

    user_id = command_parts[1]
    send_message = command_parts[2].strip()

    try:
        user_id = int(user_id)
    except ValueError:
        bot.reply_to(message, f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_id}'. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return

    if not send_message:
        bot.reply_to(message, "‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    try:
        bot.send_message(chat_id=user_id, text=f"‚úâ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ @{message.from_user.username}:\n\n{send_message}")
        bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}`", parse_mode="Markdown")

    except Exception:
        pass

@bot.message_handler(commands=['scam'])
def handle_scam_command(message):
    prompt_msg = bot.reply_to(message,
        "‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º* –∂–∞–ª–æ–±—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID/Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –≤–∏–¥–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤/–≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏", parse_mode="Markdown")

    bot.register_next_step_handler(prompt_msg, process_forward_message)

def process_forward_message(message):
    user = message.from_user
    chat_id = message.chat.id
    message_id_to_forward = message.message_id

    forward_success_count = 0
    for admin_id in admins:
        try:
            intro_text = f"üö® –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –æ—Ç `{user.id}`\n\n"
            bot.send_message(admin_id, intro_text, parse_mode="Markdown")
            bot.forward_message(chat_id=admin_id,
                                from_chat_id=chat_id,
                                message_id=message_id_to_forward)
            forward_success_count += 1
        except Exception as e:
            print(e)
            bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n\n`{e}`", parse_mode="Markdown")
            return

    if forward_success_count > 0:
        bot.reply_to(message, f"‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –°–ø–∞—Å–∏–±–æ!")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")



@bot.message_handler(commands=['scamadd'])
def scamadd(message):
    if message.from_user.id not in admins:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "–ò–¥–∏–æ—Ç", parse_mode='Markdown')
        return

    try:
        add_id = int(parts[1])
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
        return

    scam_list = []
    try:
        if os.path.exists(scam_file):
            with open(scam_file, 'r', encoding='utf-8') as file:
                content = file.read()
                if content:
                    scam_list = json.loads(content)
    except (json.JSONDecodeError, FileNotFoundError) as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {scam_file} –≤ /scamadd: {e}")
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã —Å–∫–∞–º–µ—Ä–æ–≤\nID `{add_id}` –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω", parse_mode='Markdown')
        return

    if add_id in scam_list:
        bot.reply_to(message, f"‚ö†Ô∏è ID `{add_id}` —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ —Å–∫–∞–º–µ—Ä–æ–≤", parse_mode='Markdown')
    else:
        scam_list.append(add_id)
        try:
            with open(scam_file, 'w', encoding='utf-8') as file:
                json.dump(scam_list, file, indent=4, ensure_ascii=False)
            bot.reply_to(message, f"‚úÖ ID `{add_id}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Å–∫–∞–º–µ—Ä–æ–≤", parse_mode='Markdown')
            logs.log(message.from_user, add_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {scam_file}: {e}")
            bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞\nID `{add_id}` –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω", parse_mode='Markdown')



@bot.inline_handler(lambda query: True)
def query_text(inline_query):
    results = []
    query_text = inline_query.query.strip()

    try:
        if not query_text:
             results.append(types.InlineQueryResultArticle(
                id='1',
                title="–≤–≤–µ–¥–∏—Ç–µ ID/Username –¥–ª—è –ø–æ–∏—Å–∫–∞",
                input_message_content=types.InputTextMessageContent(
                    message_text="–í–≤–µ–¥–∏—Ç–µ ID/Username –¥–ª—è –ø–æ–∏—Å–∫–∞!"
                )
            ))
        else:
            if query_text.isdigit() == True:
                userid = int(query_text)
                usershow = f"id: <code>{query_text}</code>"
            else:
                if '@' not in query_text:
                    return
                time.sleep(1.3)
                userid = getids(query_text)
                usershow = query_text
            
            scam = load_scam()
            good = load_good()

            title = "üîé –ü–æ–∏—Å–∫"
            description = query_text
            message_text = ""

            if userid in scam:
                title = "üî¥ –ù–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –°–ö–ê–ú–ï–†–û–í"
                message_text = (f'üî¥ ({usershow})\n\n'
                                f'‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ—à–µ–Ω–Ω–∏–∫. '
                                f'–°–¥–µ–ª–∫–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è\n\n'
                                f'<blockquote>@AntiScamersRobot</blockquote>')
            elif userid in good:
                title = "üü¢ –ù–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ù–ê–î–ï–ñ–ù–´–•"
                message_text = (f'üü¢ ({usershow})\n\n'
                                f'‚úÖ –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å. '
                                f'–ú–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫–∏\n\n'
                                f'<blockquote>@AntiScamersRobot</blockquote>')
            else:
                title = "üü° –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
                message_text = (f'üü° ({usershow})\n\n'
                                f'‚ùì–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. '
                                f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤\n\n'
                                f'–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –º–æ—à–µ–Ω–Ω–∏–∫?\n–°–æ–æ–±—â–∏—Ç–µ –≤ –±–æ—Ç–µ üëá\n\n'
                                f'<blockquote>@AntiScamersRobot</blockquote>')

            results.append(types.InlineQueryResultArticle(
                id=str(userid),
                title=title,
                description=description,
                input_message_content=types.InputTextMessageContent(
                    message_text=message_text,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
            ))

    except ValueError:
        results.append(types.InlineQueryResultArticle(
            id='error',
            title="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            input_message_content=types.InputTextMessageContent(
                message_text="‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
        ))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ inline –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        results.append(types.InlineQueryResultArticle(
            id='fatal_error',
            title="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å",
            input_message_content=types.InputTextMessageContent(
                message_text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"
            )
        ))

    bot.answer_inline_query(inline_query.id, results, cache_time=1)

@bot.message_handler(func=lambda message: True)
def check_number(message):
    if bot.get_chat_member(-1002574590619, message.from_user.id ).status == 'left': 
        bot.reply_to(message, "‚ö†Ô∏è *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!*\n\n–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\nüëáüëáüëá\n\n[–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è](t.me/AntiScamersCh)", parse_mode="Markdown", disable_web_page_preview=True)
        return
    try:
        if message.text.isdigit() == True:
            userid = int(message.text)
            usershow = f"id: `{userid}`"
        else:
            if '@' not in message.text:
                bot.reply_to(message, "‚ö†Ô∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID/Username*\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è [–±–æ—Ç–æ–º](t.me/username_to_id_bot)", parse_mode='Markdown', disable_web_page_preview=True)
                return
            else:
                time.sleep(1.5)
                userid = getids(message.text)
                usershow = message.text
            
        scam = load_scam()
        good = load_good()

        if userid in scam:
            bot.reply_to(message, f'üî¥ ({usershow})\n\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ—à–µ–Ω–Ω–∏–∫. –ù–µ –¥–æ–≤–µ—Ä—è—Ç—å, —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è', parse_mode='Markdown')
        elif userid in good:
             bot.reply_to(message, f'üü¢ ({usershow})\n\n‚úÖ –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å. –ú–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫–∏', parse_mode='Markdown')
        else:
            bot.reply_to(message, f'üü° ({usershow})\n\n‚ùì–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤\n\n–ù–∞—à–ª–∏ –º–æ—à–µ–Ω–Ω–∏–∫–∞? - /scam', parse_mode='Markdown')
    except ValueError:
        bot.reply_to(message, "‚ö†Ô∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID/Username*\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è [–±–æ—Ç–æ–º](t.me/username_to_id_bot)", parse_mode='Markdown', disable_web_page_preview=True)

while True:
    try:
        bot.polling()
    except Exception as e:
        print(e)